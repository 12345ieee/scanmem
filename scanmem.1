.TH scanmem 1 "January 22, 2006" "version 0.04"
.SH NAME
scanmem - locate and modify a variable in an executing process.

.SH SYNOPSIS
.B scanmem
.RB \-\-pid 
.IR          target-program-pid
.RB [\-\-version]
.RB [\-\-help]

.SH DESCRIPTION
.B scanmem
is an interactive debugging utility that can be used to isolate the address of a variable
in an executing process by successively scanning the process' address space looking for matching
values. By informing
.B scanmem
how the value of the variable changes over time, it can determine the actual location (or
locations) of the variable by successively eliminating non-matches.
.B scanmem
determines where to look by searching for mappings with
.I read
/
.I write
permission, theses are referred to as regions. Users can eliminate regions they believe are
likely unrelated to the target variable (for example, located in a shared library unrelated to
the variable in question), this will improve the speed of the scan, which can initially be quite
long in large programs.

Once a variable has been found,
.B scanmem
can modify the variable to a user specified value, either once, or continually over a period of
time.

.B scanmem
works similarly to the "
.I pokefinders
" once commonly used to cheat at video games, this function is a good demonstration of how to use
.B scanmem
, and is used in the documentation.

.SH USAGE
.B scanmem
must be invoked with the 
.IR --pid
argument, followed by the process id of the program you wish to debug. Once started, scanmem accepts
interactive commands. These are described below, entering
.IR help
at the
.B >
prompt will list the available commands and a synopsis of its usage.

.B "\-\-pid n"

Specify the process id to be debugged. The pid can be specified in decimal, hexadecimal, or octal
using the standard C language notation (leading 0x for hexadecimal, leading 0 for octal, anything else
is assumed to be decimal).

.B "\-\-version"

Print version and exit.

.B "\-\-help"

Print a short description of command line options then exit.

.SH COMMANDS

While in interactive mode,
.B scanmem
prints a decimal number followed by
.B >
, the number is the current number of possible candidates for the target variable that
are known. 0 indicates that no possible variables have been eliminated yet.

.B n

Where
.B n
represents any number in decimal, octal or hexadecimal, this command tells
.B scanmem
that the current value of the target variable is exactly
.B n.
.B scanmem
will begin a search of the entire address space, or the existsing known matches (if any),
eliminating any variable that does not have this variable.

.B >

Tells
.B scanmem
that it should eliminate all matched variables that have not increased since the last search.
For example, if the value of a variable is known to be zero when a program is executed, but increases
over time, this command can be used several times to eliminate variables that have decreased or not
changed.

.B <

As for
.B >
but indicates that the target variable has decreased since the last scan.

.B cont
.I [sec]

If 
.I sec
is not specified or 0, disable continuous mode. Otherwise, enable continuous mode with an interval
of
.I sec
seconds. Continuous configures the
.B set
command to continually modify the target variable until interrupted. This can be used to sustain
the value of a variable which decreases overtime, for example a timer that is decremented every
second can be set to 100 every 10 seconds to prevent some property from ever changing.

.B set 
.I [val]

Every match currently known (these can be displayed with the
.B list
command, or modified with the
.B delete
command) should be set to
.I val
, or 0 if not specified. This is used to change the value of the variable(s) once found by elimination.
Please note, some applications will store values in multiple locations.

.B list

List all the possible candidates currently known, including their address, last known value and
pathname. The value in the first column is the match id, and can be used in conjunction with the
.B delete
command to eliminate matches.

.B delete
.I [match-id]

Delete match
.I match-id
, which can be found from the output of the
.B list
command.

.B pid

Print out the process id of the current target program.

.B width
.I [n]

Change the width in bits of the target variable to
.I n
, which must be a multiple of CHAR_BIT (experimental).

.B lregions

List all the known regions, this can be used in combination with the 
.B dregion
command to eliminate regions that the user believes are not related to the variable in question,
thus reducing the address space required to search. The value in the first column is the
.I region-id
which must be passed to the 
.B dregion
command. The size and path (if applicable) is also printed. This can be used to eliminate regions
located in shared libraries that are unlikely to be relevant to the variable required.

.B dregion
.I [region-id]

Delete the region 
.I region-id
, which can be found in the output of the 
.B lregions
command.

.B reset

Forget all known matches and start again.

.B version

Print the version of 
.B scanmem
in use.

.B help

Print a short summary of available commands.

.B exit

Detach from the target program and exit immediately.

.SH EXAMPLES
Cheat at nethack, on systems where nethack is not installed sgid.

.nf
$ scanmem --pid `pidof nethack`
info: attaching to pid 13070.
info: maps file located at /proc/13070/maps opened.
info: 17 suitable regions found.
Please enter current value, or "help" for other commands.
0>
.fi

The 0 in the 
.B scanmem
prompt indicates we currently have no candidates, so I enter how much gold I
currently have (91 pieces) and let scanmem find the potential candidates.


.nf
0> 91
info: searching 0xbfffa000 - 0xc0000000...........ok
info: searching 0x401c2000 - 0x401e3000...........ok
info: searching 0x401c1000 - 0x401c2000...........ok
info: searching 0x401b6000 - 0x401b8000...........ok
info: searching 0x401b5000 - 0x401b6000...........ok
info: searching 0x40189000 - 0x4018a000...........ok
info: searching 0x40188000 - 0x40189000...........ok
info: searching 0x40181000 - 0x40183000...........ok
info: searching 0x4017f000 - 0x40181000...........ok
info: searching 0x40070000 - 0x40071000...........ok
info: searching 0x40068000 - 0x40070000...........ok
info: searching 0x40030000 - 0x40031000...........ok
info: searching 0x40029000 - 0x4002a000...........ok
info: searching 0x4001f000 - 0x40020000...........ok
info: searching 0x40016000 - 0x40017000...........ok
info: searching 0x081d4000 - 0x0820a000...........ok
info: searching 0x081b7000 - 0x081d4000...........ok
info: we currently have 16 matches.
16> list
[00] 0x081c1f34 {        91} (/usr/share/games/nethack/nethack)
[01] 0x081c1780 {        91} (/usr/share/games/nethack/nethack)
[02] 0x081be436 {        91} (/usr/share/games/nethack/nethack)
[03] 0x081eeffc {        91} (unassociated, typically .bss)
[04] 0x081ee0c0 {        91} (unassociated, typically .bss)
[05] 0x081eddb8 {        91} (unassociated, typically .bss)
[06] 0x081d6d88 {        91} (unassociated, typically .bss)
[07] 0x4001fcd3 {        91} (/lib/libnss_compat-2.3.5.so)
[08] 0x40029fe3 {        91} (/lib/libnss_nis-2.3.5.so)
[09] 0x40029f8b {        91} (/lib/libnss_nis-2.3.5.so)
[10] 0x40029efb {        91} (/lib/libnss_nis-2.3.5.so)
[11] 0x40029bff {        91} (/lib/libnss_nis-2.3.5.so)
[12] 0x401d18d3 {        91} (unassociated, typically .bss)
[13] 0x401d156f {        91} (unassociated, typically .bss)
[14] 0x401d120b {        91} (unassociated, typically .bss)
[15] 0xbfffd76c {        91} (unassociated, typically .bss)
16>
.fi

16 potential matches were found, many of them are clearly unrelated, as they're part
of unrelated libraries (libnss_nis.so). We could make 
.B scanmem
eliminate these manually using the
.B delete
command, however just waiting until the amount of gold changes and telling scanmem the
new value should be enough. I find some more gold, and tell
.B scanmem
the new value, 112.

.nf
16> 112
info: we currently have 1 matches.
info: match identified, use "set" to modify value.
info: enter "help" for other commands.
1> list
[00] 0x081d6d88 {       112} (unassociated, typically .bss)
.fi

Only one of the 16 original candidates now have the value 112, so this must be where the
amount of gold is stored. I'll try setting it to 10,000 pieces.

.nf
1> set 10000
info: setting *0x081d6d88 to 10000...
1> 
.fi

The resulting nethack status:

.nf
Dlvl:1  $:10000 HP:15(15) Pw:2(2) AC:7  Exp:1
.fi

.SH NOTES

.B scanmem
has been tested on multiple large programs, including the 3d shoot-em-up quake3 linux.

Obviously,
.B scanmem
can crash your program if used incorrectly.

Some programs store values in multiple locations, this is why
.B set
will change all known matches.

.SH BUGS

The first scan can be very slow on large programs, this is not a problem for subsequent 
scans as huge portions of the address space are usually eliminated. This could be improved
in future, perhaps by assuming all integers are aligned by default. Suggestions welcome.

.SH AUTHOR
Tavis Ormandy <taviso@sdf.lonestar.org>

http://taviso.decsystem.org/

All bug reports, suggestions or feedback welcome.

.SH SEE ALSO
gdb(1)
ptrace(2)
nethack(6)
